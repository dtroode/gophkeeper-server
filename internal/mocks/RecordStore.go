// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dtroode/gophkeeper-server/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// RecordStore is an autogenerated mock type for the RecordStore type
type RecordStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, record
func (_m *RecordStore) Create(ctx context.Context, record model.Record) (model.Record, error) {
	ret := _m.Called(ctx, record)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Record) (model.Record, error)); ok {
		return rf(ctx, record)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Record) model.Record); ok {
		r0 = rf(ctx, record)
	} else {
		r0 = ret.Get(0).(model.Record)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Record) error); ok {
		r1 = rf(ctx, record)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *RecordStore) GetByID(ctx context.Context, id uuid.UUID) (model.Record, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Record, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Record); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Record)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *RecordStore) GetByUserID(ctx context.Context, userID uuid.UUID) ([]model.Record, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.Record, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.Record); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserIDAndType provides a mock function with given fields: ctx, userID, recordType
func (_m *RecordStore) GetByUserIDAndType(ctx context.Context, userID uuid.UUID, recordType model.RecordType) ([]model.Record, error) {
	ret := _m.Called(ctx, userID, recordType)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserIDAndType")
	}

	var r0 []model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.RecordType) ([]model.Record, error)); ok {
		return rf(ctx, userID, recordType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.RecordType) []model.Record); ok {
		r0 = rf(ctx, userID, recordType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, model.RecordType) error); ok {
		r1 = rf(ctx, userID, recordType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeletedAfter provides a mock function with given fields: ctx, userID, deletedAfter
func (_m *RecordStore) GetDeletedAfter(ctx context.Context, userID uuid.UUID, deletedAfter time.Time) ([]model.Tombstone, error) {
	ret := _m.Called(ctx, userID, deletedAfter)

	if len(ret) == 0 {
		panic("no return value specified for GetDeletedAfter")
	}

	var r0 []model.Tombstone
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) ([]model.Tombstone, error)); ok {
		return rf(ctx, userID, deletedAfter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) []model.Tombstone); ok {
		r0 = rf(ctx, userID, deletedAfter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Tombstone)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, userID, deletedAfter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeletedAfterByType provides a mock function with given fields: ctx, userID, recordType, deletedAfter
func (_m *RecordStore) GetDeletedAfterByType(ctx context.Context, userID uuid.UUID, recordType model.RecordType, deletedAfter time.Time) ([]model.Tombstone, error) {
	ret := _m.Called(ctx, userID, recordType, deletedAfter)

	if len(ret) == 0 {
		panic("no return value specified for GetDeletedAfterByType")
	}

	var r0 []model.Tombstone
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.RecordType, time.Time) ([]model.Tombstone, error)); ok {
		return rf(ctx, userID, recordType, deletedAfter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.RecordType, time.Time) []model.Tombstone); ok {
		r0 = rf(ctx, userID, recordType, deletedAfter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Tombstone)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, model.RecordType, time.Time) error); ok {
		r1 = rf(ctx, userID, recordType, deletedAfter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpdatedAfter provides a mock function with given fields: ctx, userID, updatedAfter
func (_m *RecordStore) GetUpdatedAfter(ctx context.Context, userID uuid.UUID, updatedAfter time.Time) ([]model.Record, error) {
	ret := _m.Called(ctx, userID, updatedAfter)

	if len(ret) == 0 {
		panic("no return value specified for GetUpdatedAfter")
	}

	var r0 []model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) ([]model.Record, error)); ok {
		return rf(ctx, userID, updatedAfter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time) []model.Record); ok {
		r0 = rf(ctx, userID, updatedAfter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, userID, updatedAfter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpdatedAfterByType provides a mock function with given fields: ctx, userID, recordType, updatedAfter
func (_m *RecordStore) GetUpdatedAfterByType(ctx context.Context, userID uuid.UUID, recordType model.RecordType, updatedAfter time.Time) ([]model.Record, error) {
	ret := _m.Called(ctx, userID, recordType, updatedAfter)

	if len(ret) == 0 {
		panic("no return value specified for GetUpdatedAfterByType")
	}

	var r0 []model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.RecordType, time.Time) ([]model.Record, error)); ok {
		return rf(ctx, userID, recordType, updatedAfter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.RecordType, time.Time) []model.Record); ok {
		r0 = rf(ctx, userID, recordType, updatedAfter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, model.RecordType, time.Time) error); ok {
		r1 = rf(ctx, userID, recordType, updatedAfter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDelete provides a mock function with given fields: ctx, id
func (_m *RecordStore) SoftDelete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SoftDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRecordStore creates a new instance of RecordStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecordStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecordStore {
	mock := &RecordStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
