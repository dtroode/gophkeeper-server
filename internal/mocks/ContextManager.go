// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ContextManager is an autogenerated mock type for the ContextManager type
type ContextManager struct {
	mock.Mock
}

// GetUserIDFromContext provides a mock function with given fields: ctx
func (_m *ContextManager) GetUserIDFromContext(ctx context.Context) (uuid.UUID, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIDFromContext")
	}

	var r0 uuid.UUID
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context) (uuid.UUID, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uuid.UUID); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// SetUserIDToContext provides a mock function with given fields: ctx, userID
func (_m *ContextManager) SetUserIDToContext(ctx context.Context, userID uuid.UUID) context.Context {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for SetUserIDToContext")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) context.Context); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// NewContextManager creates a new instance of ContextManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContextManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContextManager {
	mock := &ContextManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
