// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dtroode/gophkeeper-server/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// LoginStore is an autogenerated mock type for the LoginStore type
type LoginStore struct {
	mock.Mock
}

// Consume provides a mock function with given fields: ctx, sessionID
func (_m *LoginStore) Consume(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, pendingLogin
func (_m *LoginStore) Create(ctx context.Context, pendingLogin model.PendingLogin) error {
	ret := _m.Called(ctx, pendingLogin)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PendingLogin) error); ok {
		r0 = rf(ctx, pendingLogin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBySessionID provides a mock function with given fields: ctx, sessionID
func (_m *LoginStore) GetBySessionID(ctx context.Context, sessionID string) (model.PendingLogin, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetBySessionID")
	}

	var r0 model.PendingLogin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.PendingLogin, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.PendingLogin); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Get(0).(model.PendingLogin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoginStore creates a new instance of LoginStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoginStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoginStore {
	mock := &LoginStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
