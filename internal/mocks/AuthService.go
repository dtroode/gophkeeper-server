// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/dtroode/gophkeeper-auth/model"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// CompleteLogin provides a mock function with given fields: ctx, params
func (_m *AuthService) CompleteLogin(ctx context.Context, params model.LoginComplete) (model.SessionResult, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CompleteLogin")
	}

	var r0 model.SessionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginComplete) (model.SessionResult, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginComplete) model.SessionResult); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(model.SessionResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.LoginComplete) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteReg provides a mock function with given fields: ctx, params
func (_m *AuthService) CompleteReg(ctx context.Context, params model.RegComplete) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CompleteReg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RegComplete) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLoginParams provides a mock function with given fields: ctx, params
func (_m *AuthService) GetLoginParams(ctx context.Context, params model.LoginStart) (model.LoginParams, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetLoginParams")
	}

	var r0 model.LoginParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginStart) (model.LoginParams, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginStart) model.LoginParams); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(model.LoginParams)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.LoginStart) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegParams provides a mock function with given fields: ctx, login
func (_m *AuthService) GetRegParams(ctx context.Context, login string) (model.RegParams, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetRegParams")
	}

	var r0 model.RegParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.RegParams, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.RegParams); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(model.RegParams)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
