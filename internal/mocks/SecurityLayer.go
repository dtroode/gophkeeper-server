// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	net "net"
)

// SecurityLayer is an autogenerated mock type for the SecurityLayer type
type SecurityLayer struct {
	mock.Mock
}

// Listen provides a mock function with given fields: protocol, addr
func (_m *SecurityLayer) Listen(protocol string, addr string) (net.Listener, error) {
	ret := _m.Called(protocol, addr)

	if len(ret) == 0 {
		panic("no return value specified for Listen")
	}

	var r0 net.Listener
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (net.Listener, error)); ok {
		return rf(protocol, addr)
	}
	if rf, ok := ret.Get(0).(func(string, string) net.Listener); ok {
		r0 = rf(protocol, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Listener)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(protocol, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSecurityLayer creates a new instance of SecurityLayer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecurityLayer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecurityLayer {
	mock := &SecurityLayer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
