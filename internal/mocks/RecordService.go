// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	io "io"

	mock "github.com/stretchr/testify/mock"

	model "github.com/dtroode/gophkeeper-server/internal/model"

	time "time"

	uuid "github.com/google/uuid"
)

// RecordService is an autogenerated mock type for the RecordService type
type RecordService struct {
	mock.Mock
}

// CreateRecord provides a mock function with given fields: ctx, params
func (_m *RecordService) CreateRecord(ctx context.Context, params model.CreateRecordParams) (model.Record, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecord")
	}

	var r0 model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateRecordParams) (model.Record, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateRecordParams) model.Record); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(model.Record)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateRecordParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRecordStream provides a mock function with given fields: ctx, userID, stream
func (_m *RecordService) CreateRecordStream(ctx context.Context, userID uuid.UUID, stream model.StreamReader) (model.Record, error) {
	ret := _m.Called(ctx, userID, stream)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecordStream")
	}

	var r0 model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.StreamReader) (model.Record, error)); ok {
		return rf(ctx, userID, stream)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.StreamReader) model.Record); ok {
		r0 = rf(ctx, userID, stream)
	} else {
		r0 = ret.Get(0).(model.Record)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, model.StreamReader) error); ok {
		r1 = rf(ctx, userID, stream)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecord provides a mock function with given fields: ctx, userID, recordID
func (_m *RecordService) DeleteRecord(ctx context.Context, userID uuid.UUID, recordID uuid.UUID) error {
	ret := _m.Called(ctx, userID, recordID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userID, recordID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBinaries provides a mock function with given fields: ctx, userID
func (_m *RecordService) GetBinaries(ctx context.Context, userID uuid.UUID) ([]model.Record, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBinaries")
	}

	var r0 []model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.Record, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.Record); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCards provides a mock function with given fields: ctx, userID
func (_m *RecordService) GetCards(ctx context.Context, userID uuid.UUID) ([]model.Record, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCards")
	}

	var r0 []model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.Record, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.Record); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogins provides a mock function with given fields: ctx, userID
func (_m *RecordService) GetLogins(ctx context.Context, userID uuid.UUID) ([]model.Record, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetLogins")
	}

	var r0 []model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.Record, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.Record); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotes provides a mock function with given fields: ctx, userID
func (_m *RecordService) GetNotes(ctx context.Context, userID uuid.UUID) ([]model.Record, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetNotes")
	}

	var r0 []model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.Record, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.Record); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecord provides a mock function with given fields: ctx, userID, recordID
func (_m *RecordService) GetRecord(ctx context.Context, userID uuid.UUID, recordID uuid.UUID) (model.Record, error) {
	ret := _m.Called(ctx, userID, recordID)

	if len(ret) == 0 {
		panic("no return value specified for GetRecord")
	}

	var r0 model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (model.Record, error)); ok {
		return rf(ctx, userID, recordID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) model.Record); ok {
		r0 = rf(ctx, userID, recordID)
	} else {
		r0 = ret.Get(0).(model.Record)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, recordID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecordDataStream provides a mock function with given fields: ctx, s3Key
func (_m *RecordService) GetRecordDataStream(ctx context.Context, s3Key string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, s3Key)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordDataStream")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return rf(ctx, s3Key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, s3Key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, s3Key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecords provides a mock function with given fields: ctx, userID
func (_m *RecordService) GetRecords(ctx context.Context, userID uuid.UUID) ([]model.Record, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetRecords")
	}

	var r0 []model.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.Record, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.Record); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecordsDelta provides a mock function with given fields: ctx, userID, recordType, updatedAfter, includeDeleted
func (_m *RecordService) ListRecordsDelta(ctx context.Context, userID uuid.UUID, recordType model.RecordType, updatedAfter time.Time, includeDeleted bool) ([]model.Record, []model.Tombstone, time.Time, error) {
	ret := _m.Called(ctx, userID, recordType, updatedAfter, includeDeleted)

	if len(ret) == 0 {
		panic("no return value specified for ListRecordsDelta")
	}

	var r0 []model.Record
	var r1 []model.Tombstone
	var r2 time.Time
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.RecordType, time.Time, bool) ([]model.Record, []model.Tombstone, time.Time, error)); ok {
		return rf(ctx, userID, recordType, updatedAfter, includeDeleted)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.RecordType, time.Time, bool) []model.Record); ok {
		r0 = rf(ctx, userID, recordType, updatedAfter, includeDeleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, model.RecordType, time.Time, bool) []model.Tombstone); ok {
		r1 = rf(ctx, userID, recordType, updatedAfter, includeDeleted)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]model.Tombstone)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, model.RecordType, time.Time, bool) time.Time); ok {
		r2 = rf(ctx, userID, recordType, updatedAfter, includeDeleted)
	} else {
		r2 = ret.Get(2).(time.Time)
	}

	if rf, ok := ret.Get(3).(func(context.Context, uuid.UUID, model.RecordType, time.Time, bool) error); ok {
		r3 = rf(ctx, userID, recordType, updatedAfter, includeDeleted)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// StreamRecordToClient provides a mock function with given fields: ctx, userID, recordID, stream
func (_m *RecordService) StreamRecordToClient(ctx context.Context, userID uuid.UUID, recordID uuid.UUID, stream model.StreamWriter) error {
	ret := _m.Called(ctx, userID, recordID, stream)

	if len(ret) == 0 {
		panic("no return value specified for StreamRecordToClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, model.StreamWriter) error); ok {
		r0 = rf(ctx, userID, recordID, stream)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRecordService creates a new instance of RecordService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecordService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecordService {
	mock := &RecordService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
