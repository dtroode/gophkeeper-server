// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dtroode/gophkeeper-server/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RefreshTokenStore is an autogenerated mock type for the RefreshTokenStore type
type RefreshTokenStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, token
func (_m *RefreshTokenStore) Create(ctx context.Context, token model.RefreshToken) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RefreshToken) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByJTI provides a mock function with given fields: ctx, jti
func (_m *RefreshTokenStore) GetByJTI(ctx context.Context, jti string) (model.RefreshToken, error) {
	ret := _m.Called(ctx, jti)

	if len(ret) == 0 {
		panic("no return value specified for GetByJTI")
	}

	var r0 model.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.RefreshToken, error)); ok {
		return rf(ctx, jti)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.RefreshToken); ok {
		r0 = rf(ctx, jti)
	} else {
		r0 = ret.Get(0).(model.RefreshToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, jti)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeAllByUser provides a mock function with given fields: ctx, userID
func (_m *RefreshTokenStore) RevokeAllByUser(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAllByUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeByJTI provides a mock function with given fields: ctx, jti
func (_m *RefreshTokenStore) RevokeByJTI(ctx context.Context, jti string) error {
	ret := _m.Called(ctx, jti)

	if len(ret) == 0 {
		panic("no return value specified for RevokeByJTI")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, jti)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRefreshTokenStore creates a new instance of RefreshTokenStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefreshTokenStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefreshTokenStore {
	mock := &RefreshTokenStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
